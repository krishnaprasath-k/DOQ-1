# =============================================================================
# DOQ - AI Medical Platform Production Docker Compose
# =============================================================================
# 
# Production-ready Docker Compose configuration
# 
# Usage: docker-compose -f docker-compose.prod.yml up -d
#
# =============================================================================

version: '3.8'

services:
  # -----------------------------------------------------------------------------
  # Main Application
  # -----------------------------------------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: doq-medical-ai
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - OPEN_ROUTER_API_KEY=${OPEN_ROUTER_API_KEY}
      - VAPI_API_KEY=${VAPI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - doq-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # -----------------------------------------------------------------------------
  # Redis Cache
  # -----------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: doq-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - doq-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # -----------------------------------------------------------------------------
  # Nginx Reverse Proxy
  # -----------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: doq-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - doq-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # -----------------------------------------------------------------------------
  # Monitoring (Optional)
  # -----------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: doq-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - doq-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: doq-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - doq-network
    profiles:
      - monitoring

# -----------------------------------------------------------------------------
# Networks
# -----------------------------------------------------------------------------
networks:
  doq-network:
    driver: bridge

# -----------------------------------------------------------------------------
# Volumes
# -----------------------------------------------------------------------------
volumes:
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
